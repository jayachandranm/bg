<?php
/**
 * @file
 * A module that creates Vehicle Tracking related blocks.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function bgtrans_help($path, $arg)
{
    switch ($path) {
        case "admin/help#bgtrans":
            return '<p>' . t("Manage Geo/OBD data.") . '</p>';
            break;
    }
}

/**
 * Implements hook_block_info().
 */
function bgtrans_block_info()
{
    $blocks = array();
    $blocks['alarms_rt'] = array(
        'info' => t('Current Alarm Listing'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['alarms'] = array(
        'info' => t('Alarm History'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['fuel'] = array(
        'info' => t('Fuel Usage'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
}

/**
 * Implements hook_permission().
 */
function bgtrans_permission()
{
    return array(
        'access bgtrans content' => array(
            'title' => t('Access content for the bgtrans module'),
        )
    );
}

function bgtrans_init()
{
    // Any init code goes here. eg. drupal_add_js.
    if (($lib_avail = libraries_detect('datatables')) && !empty($lib_avail['installed'])) {
        // The library is installed. Awesome!
        //dpm($lib_avail);
    } else {
        // Something went wrong. :(
        print_r("Error: Library datatables is not installed</br>");
        // This contains a short status code of what went wrong, such as 'not found'.
        $error = $lib_avail['error'];
        // This contains a detailed (localized) error message.
        $error_message = $lib_avail['error message'];
        print_r($error_message);
    }

// Try to load the library and check if that worked.
    if (($lib_load = libraries_load('datatables')) && !empty($lib_load['loaded'])) {
        //dpm($lib_load);
        // Do something with the library here.
        //print_r("Library datatables loaded.");
    } else {
        print_r("Error: Library datatables is not loaded.");
    }

//drupal_add_js(drupal_get_path('module', 'bgtrans') . '/bgtrans.js');
}

/**
 * Implements hook_libraries_info().
 */
function bgtrans_libraries_info()
{
    $libraries = array();

    // TODO: How to handle if the library is missing?
    //
    /*
        if (($library_path = libraries_get_path('datatables'))) {
        $libraries['datatables'] = array(
            'name' => 'Datatables',
            'vendor url' => 'http://www.datatables.net/',
            'download url' => 'http://www.datatables.net/download',
            'version callback' => 'bgtrans_short_circuit_version',
            'files' => array(
                'js' => array(
                    'media/js/jquery.dataTables.js',
                    'media/js/dataTables.bootstrap.js',
                ),
                'css' => array(
                    //'jquery.dataTables.css' => array(),
                    'media/css/dataTables.bootstrap.css' => array(),
                ),
            ),
        );
        }
    */
    //print_r($libraries);
    return $libraries;
}

/**
 * Short-circuit the version argument.
 */
function bgtrans_short_circuit_version()
{
    return TRUE;
}

/**
 * Implements hook_menu().
 */
function bgtrans_menu()
{
    $items = array();

    // Provide configuration options for the module from Admin page.
    $items['admin/config/content/bgtrans'] = array(
        'title' => 'BGTrans',
        'description' => 'Configuration for bgtrans module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bgtrans_admin_config'),
        'access arguments' => array('access administration pages'),
        'file' => 'bgtrans.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['bgtrans/get/alarms'] = array(
        'title' => 'Real time alarms',
        'page callback' => '_get_alarmsjson',
        //'page arguments' => array(1), //get param from URL.
        'access arguments' => array('access bgtrans content'),
        'file' => 'bgtrans.svcjson.inc',
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function _bgtrans_page()
{
    $items = array();
    //return "Hello There!";
    return $items;
}


/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function bgtrans_block_view($delta = '')
{
    // Set sid invalid by default, means to select all.
    //drupal_add_js(array('trace' => array('sid' => -1)), 'setting');
    $block = array();
    // TODO: exit if it is not a node but a view or something else. But should allow selected views.
    // TODO: Move this to init? For the case of view this happens outside.
    $mpath = drupal_get_path('module', 'bgtrans');

    // TODO: Move this to different seg? Handle case where it's not a node, but view.
    if ($node = menu_get_object()) {
        // TODO: if($node) {}
        if ($node->type == 'vehicle') {
            //dpm($node);
            $nid = $node->nid;
            // Always read these fields in English.
            $field_obd = field_get_items('node', $node, 'field_obd_id', 'en');
            $sid = $field_obd[0]['safe_value'];
            $field_vnum = field_get_items('node', $node, 'field_vehicle_num', 'en');
            $vnum = $field_vnum[0]['safe_value'];
            $field_color = field_get_items('node', $node, 'field_display_color', 'en');
            $color = $field_color[0]['safe_value'];
            /*
                        $output1 = field_view_value('node', $node, 'field_obd_id', $field_obd[0]);
                        $output_render = field_view_field('node', $node, 'field_obd_id');
            */
            //dpm($field_obd);
        } // if node-type.
    } // if node.
    else {
        $sid = "Unknown";
        $vnum = -1;
    }

    // Always pass as an array of values, for generic handling at JS side.
    $sid_list[] = $sid;
    //$sid = (string)$sid_tmp;

    switch ($delta) {
        /*
        * The real time block may appear in a page that shows all items or on a page that
        * shows single item. Create a filter to reflect this context. The filter can be
        * presented as a JSON, where some parameters may be missing, if some fields on the page
        * is missing (eg. sensor_id).
        */
        case 'alarms':
            $block['subject'] = t('Alarm History...');
            if (user_access('access content')) {
                $reqtype = 'alarms';
                $filter = new stdClass(); // (object) [];
                //$filter = new stdObject();
                $end_time = round(microtime(true) * 1000);
                $start_time = $end_time - (24 * 60 * 60 * 1000); // 1 day
                //$filter = $post_data->filter;
                //$filter['start'] = $start_time;
                //$filter['end'] = $end_time;
                $filter->start = $start_time;
                $filter->end = $end_time;
                //$sid_list = $filter->sidList;
                $sid_list = array();
                $sid_list[] = $sid;
                //$filter['sidList'] = $sid_list;
                $filter->sidList = $sid_list;
                //dpm($filter);

                module_load_include("api.inc", "bgtrans");
                $result = _getdata_exdb($reqtype, $filter);
                //dpm($result);
                //
                date_default_timezone_set('Asia/Singapore');

                $alarms = array();
                foreach ($result as $row) {
                    $time = intval($row->timestamp);
                    $lat = floatval($row->latitude);
                    $lng = floatval($row->longitude);
                    $sid = $row->sid;
                    //
                    $alarms[] = array($time, $sid, $lng, $lat);
                } // foreach
                //dpm($alarms);
                $header = array('Timestamp', 'OBD ID', 'Longitude', 'Latitude');
                //$block['content']['#markup'] = "<div id='rt_map'>Map will display here.....</div>";
                //$block['content']['#markup'] = theme('item_list', array('items' => $alarms[0]));
                $block['content']['#markup'] = theme('table', array('header' => $header, 'rows' => $alarms));
            }
            break;
        case 'fuel':
            // Pass any node related parameters here, which can then be used by the JS during Ajax.
            // Here will be an array that contains the filter values.
            // if(isset($sid)) {
            // vnum/sid list.
            $block['subject'] = t('Fuel Usage...');
            if (user_access('access content')) {
                $block['content']['#markup'] = "<div id='rt_map'>Map will display here.....</div>";
            }
            //$block['content']['#attached']['libraries_load'][] = array('leaflet');
            // If not in libraries directory,
            //$block['content']['#attached']['library'][] = array('system','ui.droppable');
            break;
        case 'alarms_rt':
            // Only appears in a view.
            // TODO: What if this block is enabled for a node?
            // TODO: nidList already set in the view preprocess.
            //drupal_add_js(array('rt' => array('vtype' => 'car')), 'setting');
            if (user_access('access content')) {
                //$block['content']['#markup'] = "<div id='show_report'>Map will display here.....</div>";
                $block = array
                (
                    'subject' => t('Current Alarms...'),
                    'content' => array
                    (
                        'alarms_block' => array
                        (
                            '#prefix' => "<div id='rt_alarms'>",
                            '#suffux' => "</div>",
                            '#markup' => t("Table will display here....."),
                        ),
                    ),
                );
            }
            $block['content']['#attached']['js'] = array(
                array(
                    'type' => 'file',
                    'data' => $mpath . '/bgtrans_alarms.js',),
            );
            break;
        case 'aob':
            if (user_access('access content')) {
                print_r("Unexpected switch");
            } // if user_access
            break;
    } // switch
    //libraries_info('moment');
    return $block;
}

/*
* https://www.drupal.org/node/1993228
*/
function bgtrans_preprocess_views_view(&$vars)
{
    $mpath = drupal_get_path('module', 'bgtrans');
    //dpm($vars['view']);
    if ($vars['view']->name == 'dashboard' && $vars['view']->current_display == 'page') {
        $selected_vehs = array();
        $veh_details = array();
        foreach ($vars['view']->result as $cnum => $cell) {
            //print_r($cell->node_title);
            //dpm($cell);
            $nid = $cell->nid;
            $vnum_content = $cell->field_field_vehicle_num[0];
            $vnum = $vnum_content['raw']['value'];
            $sid_content = $cell->field_field_obd_id[0];
            $sid = $sid_content['raw']['value'];
            $color_content = $cell->field_field_display_color[0];
            $color = $color_content['raw']['value'];
            //$sid = (string)$sid_tmp;
            //$active_nids[] = $sid_content->raw;
            $veh_details = array('sid' => $sid,
                'nid' => $nid,
                'vnum' => $vnum,
                'color' => $color);
            $selected_vehs[$sid] = $veh_details;
            //$active_sids[] = $sid_content['raw']['value'];
        }
        //print_r($visible_vehs);
        //dpm($active_sids);
        drupal_add_js(array('alarms' => array('veh_list' => $selected_vehs)), 'setting');
    }
}
