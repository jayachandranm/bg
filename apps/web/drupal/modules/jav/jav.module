<?php
/**
 * @file
 * A module that creates blocks for JAV.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function jav_help($path, $arg)
{
    switch ($path) {
        case "admin/help#jav":
            return '<p>' . t("Manage JAV data.") . '</p>';
            break;
    }
}

/**
 * Implement the blocks in a separate file.
 *  hook_hook_info()
 * 
 */
function jav_hook_info()
{
  $hooks['block_info']['group'] = 'block';
  $hooks['block_view']['group'] = 'block';

  return $hooks;
}


/**
 * Each block in separate file.
 * put block1 in MODULENAME.block1.inc and block2 in MODULENAME.block2.inc
 */
/*
function hook_block_view($delta = '')
{
  if($delta == 'block1')
  {
    module_load_include('inc', 'jav', 'jav.block1');
  }
  elseif($delta == 'block2')
  {
    module_load_include('inc', 'MODULENAME', 'MODULENAME.block2');
  }
}
*/

/**
 * Implements hook_permission().
 */
function jav_permission()
{
    return array(
        'access jav content' => array(
            'title' => t('Access content for the jav module'),
        )
    );
}

function jav_init()
{
    // Any init code goes here. eg. drupal_add_js.

    if (($lib_avail = libraries_detect('moment')) && !empty($lib_avail['installed'])) {
        // The library is installed.
        //dpm($lib_avail);
    } else {
        // Something went wrong. :(
        print_r("Error: Library moment is not installed</br>");
        // This contains a short status code of what went wrong, such as 'not found'.
        $error = $lib_avail['error'];
        // This contains a detailed (localized) error message.
        $error_message = $lib_avail['error message'];
        print_r($error_message);
    }
    // Try to load the library and check if that worked.
    if (($lib_load = libraries_load('moment')) && !empty($lib_load['loaded'])) {
        //dpm($lib_load);
        // Do something with the library here.
        //print_r("Library datatables loaded.");
    } else {
        print_r("Error: Library moment is not loaded.");
    }

    if (($lib_avail = libraries_detect('bootstrap-datetimepicker')) && !empty($lib_avail['installed'])) {
        //dpm($lib_avail);
    } else {
        print_r("Error: Library bootstrap-datetimepicker is not installed</br>");
        $error = $lib_avail['error'];
        $error_message = $lib_avail['error message'];
        print_r($error_message);
    }
    // Try to load the library and check if that worked.
    if (($lib_load = libraries_load('bootstrap-datetimepicker')) && !empty($lib_load['loaded'])) {
        //print_r("Library bootstrap-datetimepicker loaded.");
    } else {
        print_r("Error: Library bootstrap-datetimepicker is not loaded.");
    }


    if (($library = libraries_detect('pdfmake')) && !empty($library['installed'])) {
        //print_r("pdfmake loaded");
    }
    else {
        $error = $library['error'];
        $error_message = $library['error message'];
        print_r("pdfmake not installed.");
    }
    //
    if (($lib_load = libraries_load('pdfmake')) && !empty($lib_load['loaded'])) {
        //print_r("Library pdfmake loaded.");
    } else {
        print_r("Error: Library pdfmake is not loaded.");
    }


    if (($lib_avail = libraries_detect('datatables')) && !empty($lib_avail['installed'])) {
        // The library is installed. 
        //dpm($lib_avail);
    } else {
        // Something went wrong. :(
        print_r("Error: Library datatables is not installed</br>");
        $error = $lib_avail['error'];
        $error_message = $lib_avail['error message'];
        print_r($error_message);
    }

    // Try to load the library and check if that worked.
    if (($lib_load = libraries_load('datatables')) && !empty($lib_load['loaded'])) {
        //print_r("Library datatables loaded.");
    } else {
        print_r("Error: Library datatables is not loaded.");
    }

    // TODO: Attach the JS to Dashboard view.
    drupal_add_js(drupal_get_path('module', 'jav') .'/jav.js');
    //drupal_add_css(drupal_get_path('module', 'jav') .'/your-css.css');
    //drupal_add_css(drupal_get_path('theme', 'hdbjav') .'/your-css.css');
}

/**
 * Implements hook_libraries_info().
 */
function jav_libraries_info()
{
    $libraries = array();

    // TODO: How to handle if the library is missing?
    //
    if (($library_path = libraries_get_path('moment'))) {
        //print_r("Moment lib path OK.");
        $libraries['moment'] = array(
            'name' => 'Moment JS',
            'vendor url' => 'http://momentjs.com/',
            'download url' => 'http://momentjs.com/downloads/moment.js',
            'version callback' => 'jav_short_circuit_version',
            'files' => array(
                'js' => array(
                    'moment.min.js',
                    //'moment.js',
                ),
            ),
        );
    }


    if (($library_path = libraries_get_path('bootstrap-datetimepicker'))) {
        $libraries['bootstrap-datetimepicker'] = array(
            'name' => 'Bootstrap datetime picker',
            'vendor url' => 'https://eonasdan.github.io/bootstrap-datetimepicker/',
            'download url' => 'https://eonasdan.github.io/bootstrap-datetimepicker/',
            'version callback' => 'jav_short_circuit_version',
            'files' => array(
                'js' => array(
                    'bootstrap-datetimepicker.js',
                ),
                'css' => array(
                    'bootstrap-datetimepicker.css' => array(),
                ),
            ),
        );
    }

    if (($library_path = libraries_get_path('daterangepicker'))) {
        //print_r("Daterange lib path OK.");

        $libraries['daterangepicker'] = array(
            'library path' => $library_path,
            'name' => 'Daterange Picker',
            'vendor url' => 'http://www.daterangepicker.com/',
            'download url' => 'https://github.com/dangrossman/bootstrap-daterangepicker/archive/master.zip',
            'version callback' => 'jav_short_circuit_version',
            'files' => array(
                'js' => array(
                    'daterangepicker.js',
                ),
                'css' => array(
                    'daterangepicker.css',
                ),
            ),
            'dependencies' => array(
                'moment',
            ),
        );
    }
    if (($library_path = libraries_get_path('leaflet'))) {
        $libraries['leaflet'] = array(
            //'title' => 'Vertical Tabs',
            //'website' => 'http://drupal.org/node/323112',
            'name' => 'Leaflet',
            'vendor url' => 'http://www.leaflet.com/',
            'download url' => 'http://www.leaflet.com/download',
            /*
            // TODO: automatically get version number from Changelog or readme.
            'version arguments' => array(
            'file' => 'highcharts.js',
            // jQuery FlexSlider v2.1
            'pattern' => '/Highcharts v(\d+\.+\d+)/',
            'lines' => 2,
          ),
          */
            'version callback' => 'jav_short_circuit_version',
            'files' => array(
                'js' => array(
                    'leaflet.js',
                    //'fs/Control.FullScreen.js',
                    //'leaflet-fullscreen/Leaflet.fullscreen.js',
                    //'snake/L.Polyline.SnakeAnim.js',
                    //'playback/LeafletPlayback.js',
                    //'beautify/leaflet-beautify-marker-icon.js',
                    //'beautify/leaflet-beautify-marker.js',
                ),
                'css' => array(
                    'leaflet.css' => array(),
                    //'fs/Control.FullScreen.css' => array(),
                    //'leaflet-fullscreen/leaflet.fullscreen.css' => array(),
                    //'beautify/leaflet-beautify-marker-icon.css' => array(),
                ),
            ),
        );
    }

    if (($library_path = libraries_get_path('pdfmake'))) {
        $libraries['pdfmake'] = array(
            'name' => 'pdfmake',
            'vendor url' => 'https://github.com/bpampuch/pdfmake',
            'download url' => 'https://github.com/bpampuch/pdfmake',
            'version callback' => 'jav_short_circuit_version',
            'files' => array(
                'js' => array(
                    'jszip.min.js',
                    'pdfmake.min.js',
                    'vfs_fonts.js',
                ),
            ),
        );
    }


    if (($library_path = libraries_get_path('datatables'))) {
        $libraries['datatables'] = array(
            'name' => 'Datatables',
            'vendor url' => 'http://www.datatables.net/',
            'download url' => 'http://www.datatables.net/download',
            'version callback' => 'jav_short_circuit_version',
            'files' => array(
                'js' => array(
                    'media/js/jquery.dataTables.js',
                    'media/js/dataTables.bootstrap.js',
                    'buttons_file_export/buttons.html5.min.js',
                    'buttons_file_export/buttons.print.min.js',
                    'buttons_file_export/dataTables.buttons.min.js',
                    'yadcf/jquery.dataTables.yadcf.js',
                ),
                'css' => array(
                    //'jquery.dataTables.css' => array(),
                    'media/css/dataTables.bootstrap.css' => array(),
                    'yadcf/jquery.dataTables.yadcf.css' => array(),
                ),
            ),
        );
    }
    //print_r($libraries);
    return $libraries;
}

/**
 * Short-circuit the version argument.
 */
function jav_short_circuit_version()
{
    return TRUE;
}

/**
 * Implements hook_menu().
 */
function jav_menu()
{
    $items = array();

    // Provide configuration options for the module from Admin page.
    $items['admin/config/content/jav'] = array(
        'title' => 'JAV',
        'description' => 'Configuration for JAV module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('jav_admin_config'),
        'access arguments' => array('access administration pages'),
        'file' => 'jav.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['jav'] = array(
        'title' => 'Real time updates',
        'page callback' => '_jav_page',
        'access arguments' => array('access jav content'),
        //Will appear in Navigation menu.
        'type' => MENU_NORMAL_ITEM,
    );
    $items['jav/get'] = array(
        'title' => 'Real time updates',
        'page callback' => '_get_json',
        //'page arguments' => array(1), //get param from URL.
        'access arguments' => array('access jav content'),
        'file' => 'jav.svcjson.inc',
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function _jav_page()
{
    $items = array();
    //return "Hello There!";
    return $items;
}

/**
 * Implements hook_views_api().
 */
function jav_views_api()
{
    return array(
        'api' => 3,
        //'path' => drupal_get_path('module', 'jav') . '/includes/views',
    );
}

/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function jav_node_insert($node)
{
    // Action for node creation same as node update.
    //jav_node_update($node);
    //if ($node->type == 'stations' && !isset($node->nid)) {
    if ($node->type == 'lifts') {
        $flag = true;
        _lift_details_to_db($node, $flag);
    }
    // Notice that we are ignoring any revision information using $node->nid
}

/**
 * Implements hook_node_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 *
 * This hook is called when an existing node has been changed.
 */
function jav_node_update($node)
{
    if ($node->type == 'lifts') {
        $flag = false;
        _lift_details_to_db($node, $flag);
    }
    if ($node->type == 'lift_companies') {
	 $flag = false;
        _update_db_referencing_lifts($node, $flag);
    }
}


function _lift_details_to_db($node, $flag)
{
	//$ref = $node->get($field_lift_supplier)->referencedEntities();
	//$view = node_view($node);
        $lift_nid = $node->nid;
        $lift_id = $node->field_lift_id['und'][0]['value'];
	$tid_supplier = $node->field_lift_supplier['und'][0]['target_id'];
	$node_supplier = node_load($tid_supplier);
	$supplier_nid = $node_supplier->nid;
	$sms_list = $node_supplier->field_sms_nums2['und'][0]['value'];
	dpm($sms_list);
        //$flag = false;
        module_load_include("config.inc", "jav");
        $jav_db = getExtDBConfig();
        module_load_include("api.inc", "jav");
        _update_ext_db($jav_db, $lift_nid, $lift_id, $supplier_nid, $sms_list, $flag);
}

function _update_db_referencing_lifts($node_supplier, $flag)
{
	$supplier_nid = $node_supplier->nid;
	$sms_list = $node_supplier->field_sms_nums2['und'][0]['value'];
	// Get all lifts referencing to this node entity.
        module_load_include("config.inc", "jav");
        $jav_db = getExtDBConfig();
        module_load_include("api.inc", "jav");
	$results = _get_ext_db_liftlist($jav_db, $supplier_nid);
	$liftlist = array();
	foreach($results as $row) {
	    $lift_id = $row->lift_id;
	    $lift_nid = intval($row->lift_nid);
	    $supplier_nid = intval($row->supplier_nid);
	    $liftlist = $lift_id;
            _update_ext_db($jav_db, $lift_nid, $lift_id, $supplier_nid, $sms_list, $flag);
	}
}

/**
 * http://willvincent.com/blog/building-custom-realtime-chat-module-drupal-7-part-3
 *
 * Implements hook_theme().
 */



function _jav_set_list($lift_list = NULL) {
  static $stored_lift_list = NULL;
  if ($lift_list) {
    $stored_lift_list = $lift_list;
  }
  return $stored_lift_list;
}


/*
* https://www.drupal.org/node/1993228
*/
function jav_preprocess_views_view(&$vars)
{
    $mpath = drupal_get_path('module', 'jav');
    //dpm($vars['view']);
    if ($vars['view']->name == 'dashboard' && $vars['view']->current_display == 'page') {
        $selected_devs = array();
        $dev_details = array();
        $selected_lifts = array();
        foreach ($vars['view']->result as $cnum => $cell) {
            //print_r($cell->node_title);
            //dpm($cell);
            $nid = $cell->nid;
            $sid_content = $cell->field_field_lift_id[0];
            $sid = $sid_content['raw']['value'];
            $loc_content = $cell->field_field_location_address[0];
            $loc = $loc_content['raw']['value'];
            $lift_details = array(
                'sid' => $sid,
                'nid' => $nid,
                'loc' => $loc,
            );
            $selected_lifts[$sid] = $lift_details;
            //$active_sids[] = $sid_content['raw']['value'];
        }
        //print_r($visible_vehs);
        //dpm($active_sids);
        //$vars['dev_list'] = $selected_lifts;
        _jav_set_list($selected_lifts);
        //$lift_list = &drupal_static('jav');
        //$lift_list = $selected_lifts;
        drupal_add_js(array('rt' => array('dev_list' => $selected_lifts)), 'setting');
    }
}

/**
 *
 * Substituting custom field content in views hooks 
 * eg. for disaplying data from ext db.
 */
function jav_views_pre_render(&$view) {
    // This is messy and hard to understand for site builders 
	// and future developers.
	//dpm($view->field);
	foreach($view->result as &$item) {
            //dpm()
	    $lift_id = $item->field_field_lift_id[0]['rendered']['#markup'];
	    $sid_list = array();
	    $sid_list[] = $lift_id;
	    $rpt_time = $item->field_field_event_time[0]['rendered']['#markup'];
	    /*
	    if($rpt_time == "Now") {
		    $item = null;
	    }
	     */
                $reqtype = 'rt';
                $filter = new stdClass(); // (object) [];
                $filter->start = -1;
                $filter->end = -1;
                $filter->sidList[] = $sid_list;
                //$filter->sidList = ['112233C'];
                //
                module_load_include("config.inc", "jav");
                $jav_db = getExtDBConfig();
                module_load_include("api.inc", "jav");
                $result = _getdata_exdb($jav_db, $reqtype, $filter);
                date_default_timezone_set('Asia/Singapore');
                //
                $items = array();
		// Only one result expected. If no entry, set default as None.
		$lift_event = 'None';
		$rpt_time = 'NA';
		foreach ($result as $row) {
	            //dpm($result);
		    $is_set = $row->is_set;
		    if($is_set == 1) {
			    $lift_event = $row->value;
                            $date = new DateTime();
                            $date->setTimestamp(intval($row->ts)/1000);
                            $rpt_time = $date->format('j-M-y g:i a');
	             }
                }
                //dpm($items);

            $item->field_field_event_type[0]['rendered']['#markup'] = t($lift_event);
            $item->field_field_event_time[0]['rendered']['#markup'] = t($rpt_time);
	    // Multiple errors expected for same list.
            //$item->field_field_sensor_status[0]['rendered']['#markup'] = t($rpt_time);
	}
    //$view->result[0]->custom_field_999 = t('Foo');
  }
/*
function jav_views_pre_render(&$view) {
    //dpm($view->field['field_event_ack']);
    if ($view->name == 'alerts' && isset($view->field['field_event_ack'])) {
        //dpm($view);
        $attributes = array('onclick' => "alert('Hello')");
        //print_r($attributes);
        $view->field['field_event_ack']->options['alter']['link_attributes'] = $attributes;
    }
}
*/
