<?php
/**
 * @file
 * A module that creates Navigation related blocks.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function bgmap_help($path, $arg)
{
    switch ($path) {
        case "admin/help#bgmap":
            return '<p>' . t("Manage Geo/OBD data.") . '</p>';
            break;
    }
}

/**
 * Implements hook_block_info().
 */
function bgmap_block_info()
{
    $blocks = array();
    $blocks['rtsingle'] = array(
        // The name that will appear in the block list.
        'info' => t('Location Tracking'),
        // Default setting.
        'cache' => DRUPAL_CACHE_PER_ROLE,
        //'cache' => DRUPAL_CACHE_GLOBAL,
    );
    $blocks['rtmulti'] = array(
        'info' => t('Location Tracking All'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['trace'] = array(
        'info' => t('Location Trace'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['tracemulti'] = array(
        'info' => t('Location Trace All'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
}

/**
 * Implements hook_permission().
 */
function bgmap_permission()
{
    return array(
        'access bgmap content' => array(
            'title' => t('Access content for the bgmap module'),
        )
    );
}

function bgmap_init()
{
    // Any init code goes here. eg. drupal_add_js.
    if (($lib_avail = libraries_detect('datatables')) && !empty($lib_avail['installed'])) {
        // The library is installed. Awesome!
        //dpm($lib_avail);
    } else {
        // Something went wrong. :(
        print_r("Error: Library datatables is not installed</br>");
        // This contains a short status code of what went wrong, such as 'not found'.
        $error = $lib_avail['error'];
        // This contains a detailed (localized) error message.
        $error_message = $lib_avail['error message'];
        print_r($error_message);
    }

// Try to load the library and check if that worked.
    if (($lib_load = libraries_load('datatables')) && !empty($lib_load['loaded'])) {
        //dpm($lib_load);
        // Do something with the library here.
        //print_r("Library datatables loaded.");
    } else {
        print_r("Error: Library datatables is not loaded.");
    }

//drupal_add_js(drupal_get_path('module', 'bgmap') . '/bgmap.js');
}

/**
 * Implements hook_libraries_info().
 */
function bgmap_libraries_info()
{
    $libraries = array();

    // TODO: How to handle if the library is missing?
    //
    if (($library_path = libraries_get_path('moment'))) {
        //print_r("Moment lib path OK.");
        $libraries['moment'] = array(
            'name' => 'Moment JS',
            'vendor url' => 'http://momentjs.com/',
            'download url' => 'http://momentjs.com/downloads/moment.js',
            'version callback' => 'bgmap_short_circuit_version',
            'files' => array(
                'js' => array(
                    'moment.min.js',
                ),
            ),
        );
    }
    if (($library_path = libraries_get_path('daterangepicker'))) {
        //print_r("Daterange lib path OK.");

        $libraries['daterangepicker'] = array(
            'library path' => $library_path,
            'name' => 'Daterange Picker',
            'vendor url' => 'http://www.daterangepicker.com/',
            'download url' => 'https://github.com/dangrossman/bootstrap-daterangepicker/archive/master.zip',
            'version callback' => 'bgmap_short_circuit_version',
            'files' => array(
                'js' => array(
                    'daterangepicker.js',
                ),
                'css' => array(
                    'daterangepicker.css',
                ),
            ),
            'dependencies' => array(
                'moment',
            ),
        );
    }
    if (($library_path = libraries_get_path('bootstrap-slider'))) {
        $libraries['bootstrap-slider'] = array(
            'library path' => $library_path,
            'name' => 'Bootstrap Slider',
            'vendor url' => 'https://github.com/seiyria/bootstrap-slider',
            'download url' => 'https://github.com/seiyria/bootstrap-slider/archive/master.zip',
            'version callback' => 'bgmap_short_circuit_version',
            'files' => array(
                'js' => array(
                    'bootstrap-slider.js',
                ),
                'css' => array(
                    'css/bootstrap-slider.css',
                ),
            ),
        );
    }
    if (($library_path = libraries_get_path('ion-rangeslider'))) {
        $libraries['ion-rangeslider'] = array(
            'library path' => $library_path,
            'name' => 'Ion RangeSlider',
            'vendor url' => 'https://github.com/IonDen/ion.rangeSlider',
            'download url' => 'https://github.com/IonDen/ion.rangeSlider/archive/master.zip',
            'version callback' => 'bgmap_short_circuit_version',
            'files' => array(
                'js' => array(
                    'js/ion.rangeSlider.js',
                ),
                'css' => array(
                    'css/ion.rangeSlider.css',
                    'css/ion.rangeSlider.skinModern.css',
                    //'css/ion.rangeSlider.skinFlat.css',
                ),
            ),
        );
    }
    if (($library_path = libraries_get_path('leaflet'))) {
        $libraries['leaflet'] = array(
            //'title' => 'Vertical Tabs',
            //'website' => 'http://drupal.org/node/323112',
            'name' => 'Leaflet',
            'vendor url' => 'http://www.leaflet.com/',
            'download url' => 'http://www.leaflet.com/download',
            /*
            // TODO: automatically get version number from Changelog or readme.
            'version arguments' => array(
            'file' => 'highcharts.js',
            // jQuery FlexSlider v2.1
            'pattern' => '/Highcharts v(\d+\.+\d+)/',
            'lines' => 2,
          ),
          */
            'version callback' => 'bgmap_short_circuit_version',
            'files' => array(
                'js' => array(
                    'leaflet.js',
                    //'fs/Control.FullScreen.js',
                    'leaflet-fullscreen/Leaflet.fullscreen.js',
                    'snake/L.Polyline.SnakeAnim.js',
                    'playback/LeafletPlayback.js',
                    'beautify/leaflet-beautify-marker-icon.js',
                    'beautify/leaflet-beautify-marker.js',
                ),
                'css' => array(
                    'leaflet.css' => array(),
                    //'fs/Control.FullScreen.css' => array(),
                    'leaflet-fullscreen/leaflet.fullscreen.css' => array(),
                    'beautify/leaflet-beautify-marker-icon.css' => array(),
                ),
            ),
        );
    }
    if (($library_path = libraries_get_path('datatables'))) {
        $libraries['datatables'] = array(
            'name' => 'Datatables',
            'vendor url' => 'http://www.datatables.net/',
            'download url' => 'http://www.datatables.net/download',
            'version callback' => 'bgmap_short_circuit_version',
            'files' => array(
                'js' => array(
                    'media/js/jquery.dataTables.js',
                    'media/js/dataTables.bootstrap.js',
                ),
                'css' => array(
                    //'jquery.dataTables.css' => array(),
                    'media/css/dataTables.bootstrap.css' => array(),
                ),
            ),
        );
    }
    //print_r($libraries);
    return $libraries;
}

/**
 * Short-circuit the version argument.
 */
function bgmap_short_circuit_version()
{
    return TRUE;
}

/**
 * Implements hook_menu().
 */
function bgmap_menu()
{
    $items = array();

    // Provide configuration options for the module from Admin page.
    $items['admin/config/content/bgmap'] = array(
        'title' => 'BGTrans',
        'description' => 'Configuration for bgtrans module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bgmap_admin_config'),
        'access arguments' => array('access administration pages'),
        'file' => 'bgmap.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['bgmap'] = array(
        'title' => 'Real time map',
        'page callback' => '_bgmap_page',
        'access arguments' => array('access bgmap content'),
        //Will appear in Navigation menu.
        'type' => MENU_NORMAL_ITEM,
    );
    $items['bgmap/get'] = array(
        'title' => 'Real time map',
        'page callback' => '_get_json',
        //'page arguments' => array(1), //get param from URL.
        'access arguments' => array('access bgmap content'),
        'file' => 'bgmap.svcjson.inc',
        'type' => MENU_CALLBACK,
    );
    $items['bgmap/geoj'] = array(
        'title' => 'Retrieve GeoJSON for RT markers or Trace.',
        'page callback' => '_get_geojson',
        //'page arguments' => array(1), //get param from URL.
        'access arguments' => array('access bgmap content'),
        'file' => 'bgmap.svcjson.inc',
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function _bgmap_page()
{
    $items = array();
    //return "Hello There!";
    return $items;
}

/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function bgmap_node_insert($node)
{
    if ($node->type == 'vehicle') {
        $nid = $node->nid;
        $sid = $node->field_obd_id['und'][0]['value'];
        $vnum = $node->field_vehicle_num['und'][0]['value'];
        $vgroup = 'car';
        $flag = true;
        //$vgroup = $node->field_vehicle_group['und'][0]['value'];
        module_load_include("config.inc", "bgmap");
        // TODO: Improve the config option.
        $bg_db = getExtDBConfig();
        module_load_include("api.inc", "bgmap");
        _update_ext_db($bg_db, $nid, $sid, $vnum, $vgroup, $flag);
    }
    /*
    if (variable_get('bglight_node_type_' . $node->type, FALSE)) {
    // Notice that we are ignoring any revision information using $node->nid
  }
  */
}

/**
 * Implements hook_node_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 *
 * This hook is called when an existing node has been changed.
 */
function bgmap_node_update($node)
{
    //if ($node->type == 'stations' && !isset($node->nid)) {
    if ($node->type == 'vehicle') {
        //dpm($node);
        $nid = $node->nid;
        $sid = $node->field_obd_id['und'][0]['value'];
        $vnum = $node->field_vehicle_num['und'][0]['value'];
        $vgroup = 'car';
        $flag = false;
        module_load_include("config.inc", "bgmap");
        $bg_db = getExtDBConfig();
        module_load_include("api.inc", "bgmap");
        _update_ext_db($bg_db, $nid, $sid, $vnum, $vgroup, $flag);
    }
}


/**
 * http://willvincent.com/blog/building-custom-realtime-chat-module-drupal-7-part-3
 *
 * Implements hook_theme().
 */
function bgmap_theme()
{
    $theme_subfolder = drupal_get_path('module', 'bgmap') . "/theme";
    return array(
        'bgmap_trace' => array(
            'path' => $theme_subfolder,
            'template' => 'bgmap_trace',
            'arguments' => array('items' => NULL),
            // All preprocess hooks in .theme.inc.
            //'file' => 'bgmap.theme.inc',
        ),
    );
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function bgmap_block_view($delta = '')
{
    // Set sid invalid by default, means to select all.
    //drupal_add_js(array('trace' => array('sid' => -1)), 'setting');
    $block = array();
    // TODO: exit if it is not a node but a view or something else. But should allow selected views.
    // TODO: Move this to init? For the case of view this happens outside.
    $mpath = drupal_get_path('module', 'bgmap');

    if ($node = menu_get_object()) {
        // TODO: if($node) {}
        if ($node->type == 'vehicle') {
            //dpm($node);
            $nid = $node->nid;
            // Always read these fields in English.
            $field_obd = field_get_items('node', $node, 'field_obd_id', 'en');
            $sid = $field_obd[0]['safe_value'];
            $field_vnum = field_get_items('node', $node, 'field_vehicle_num', 'en');
            $vnum = $field_vnum[0]['safe_value'];
            $field_color = field_get_items('node', $node, 'field_display_color', 'en');
            $color = $field_color[0]['safe_value'];
            /*
                        $output1 = field_view_value('node', $node, 'field_obd_id', $field_obd[0]);
                        $output_render = field_view_field('node', $node, 'field_obd_id');
            */
            //dpm($field_obd);
        } // if node-type.
    } // if node.
    else {
        $sid = "Unknown";
        $vnum = -1;
    }

    // Always pass as an array of values, for generic handling at JS side.
    $sid_list[] = $sid;
    //$sid = (string)$sid_tmp;

    switch ($delta) {
        /*
        * The real time block may appear in a page that shows all items or on a page that
        * shows single item. Create a filter to reflect this context. The filter can be
        * presented as a JSON, where some parameters may be missing, if some fields on the page
        * is missing (eg. sensor_id).
        */
        case 'rtsingle':
            // Pass any node related parameters here, which can then be used by the JS during Ajax.
            // Here will be an array that contains the filter values.
            // if(isset($sid)) {
            // vnum/sid list.
            $block['subject'] = t('Location...');
            if (user_access('access content')) {
                $block['content']['#markup'] = "<div id='rt_map'>Map will display here.....</div>";
            }
            $block['content']['#attached']['libraries_load'][] = array('leaflet');
            // If not in libraries directory,
            //$block['content']['#attached']['library'][] = array('system','ui.droppable');
            $block['content']['#attached']['js'] = array(
                array(
                    'type' => 'file',
                    'data' => $mpath . '/bgmap_rt.js',),
                array(
                    'type' => 'setting',
                    'data' => array(
                        'rt' => array(
                            'veh_list' => array(
                                $sid => array(
                                    'sid' => $sid,
                                    'nid' => $nid,
                                    'vnum' => $vnum,
                                    'color' => $color
                                ),
                            ),
                        ),
                    ),
                )
            );
            break;
        case 'rtmulti':
            // Only appears in a view.
            // TODO: What if this block is enabled for a node?
            // TODO: nidList already set in the view preprocess.
            //drupal_add_js(array('rt' => array('vtype' => 'car')), 'setting');
            if (user_access('access content')) {
                //$block['content']['#markup'] = "<div id='show_report'>Map will display here.....</div>";
                $block = array
                (
                    'subject' => t('Locations...'),
                    'content' => array
                    (
                        'rtmulti_block' => array
                        (
                            '#prefix' => "<div id='rt_map'>",
                            '#suffux' => "</div>",
                            '#markup' => t("Map will display here....."),
                        ),
                    ),
                );
            }
            $block['content']['#attached']['libraries_load'][] = array('leaflet');
            $block['content']['#attached']['js'] = array(
                array(
                    'type' => 'file',
                    'data' => $mpath . '/bgmap_rt.js',),
            );
            break;
        case 'trace':
            // TODO: If not a node or if node type is different, don't show the block.
            //$vgroup = 'car';
            $trace_anim = variable_get('bgmap_trace_anim', 1);
            if (isset($sid)) {
                // TODO.
            }

            $block['subject'] = t('Route History');
            if (user_access('access content')) {
                $items2 = array();
                $block['content']['#markup'] = theme('bgmap_trace', array('items' => $items2));
            } // access.
            /*
            $block['content']['#attached']['js'][]
                = array('data' => 'https://cdn.jsdelivr.net/momentjs/2.14.1/moment.min.js',
                             'type' => 'external');
            */
            $block['content']['#attached']['libraries_load'][] = array('moment');
            $block['content']['#attached']['libraries_load'][] = array('daterangepicker');
            $block['content']['#attached']['libraries_load'][] = array('leaflet');
            $block['content']['#attached']['libraries_load'][] = array('bootstrap-slider');
            $block['content']['#attached']['libraries_load'][] = array('ion-rangeslider');
            //drupal_add_js(array('trace' => array('sid' => $sid)), 'setting');
            // TODO:/ sid_list not required for trace single.
            $block['content']['#attached']['js'] = array(
                array(
                    'type' => 'file',
                    'data' => $mpath . '/bgmap_trace_top_control.js',),
                array(
                    'type' => 'file',
                    'data' => $mpath . '/bgmap_trace.js',),
                array(
                    'type' => 'file',
                    'data' => $mpath . '/bgmap_trace_control.js',),
                array(
                    'type' => 'setting',
                    'data' => array(
                        'trace' => array('sid_list' => $sid_list, 
                                   'trace_anim' => $trace_anim,
                                   'color' => $color,
                        ),
                    ),
                )
            );
            //dpm($block);
            break;
        case 'tracemulti':
            // TODO: If not a node or if node type is different, don't show the block.
            //$vgroup = 'car';
            $block['subject'] = t('Route(s) History');
            if (user_access('access content')) {
                $items2 = array();
                $items2[] = array('Test', '2');
                // No content in the last week.
                if (empty($items2)) {
                    $block['content']['#markup'] = t('No data available.');
                    //$block['content'] = t('No data available.');
                } else {
                    // Pass data through theme function.
                    //$block['content']['#markup'] = theme('item_list', array('items' => $items2));
                    $block['content']['#markup'] = theme('table', array('items' => $items2));
                    //$block['content'] = theme('item_list', array('items' => $items2));
                }
            } // access.
            $block['content']['#attached']['libraries_load'][] = array('leaflet');
            break;
        case 'aob':
            if (user_access('access content')) {
                print_r("Unexpected switch");
            } // if user_access
            break;
    } // switch
    //libraries_info('moment');
    return $block;
}

/*
* https://www.drupal.org/node/1993228
*/
function bgmap_preprocess_views_view(&$vars)
{
    $mpath = drupal_get_path('module', 'bgmap');
    //dpm($vars['view']);
    if ($vars['view']->name == 'dashboard' && $vars['view']->current_display == 'page') {
        $selected_vehs = array();
        $veh_details = array();
        foreach ($vars['view']->result as $cnum => $cell) {
            //print_r($cell->node_title);
            //dpm($cell);
            $nid = $cell->nid;
            $vnum_content = $cell->field_field_vehicle_num[0];
            $vnum = $vnum_content['raw']['value'];
            $sid_content = $cell->field_field_obd_id[0];
            $sid = $sid_content['raw']['value'];
            $color_content = $cell->field_field_display_color[0];
            $color = $color_content['raw']['value'];
            //$sid = (string)$sid_tmp;
            //$active_nids[] = $sid_content->raw;
            $veh_details = array('sid' => $sid,
                'nid' => $nid,
                'vnum' => $vnum,
                'color' => $color);
            $selected_vehs[$sid] = $veh_details;
            //$active_sids[] = $sid_content['raw']['value'];
        }
        //print_r($visible_vehs);
        //dpm($active_sids);
        drupal_add_js(array('rt' => array('veh_list' => $selected_vehs)), 'setting');
    }
}
