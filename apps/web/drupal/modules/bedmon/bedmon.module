<?php
/**
 * @file
 * A module that displays real time data from sensors.
 */


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function bedmon_help($path, $arg) {
  switch ($path) {
    case "admin/help#bedmon":
      return '<p>' . t("Displays selected data in real time") . '</p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function bedmon_permission() {
  return array(
    'access bedmon content' => array(
      'title' => t('Access content for the bg charts module'),
    )
  );
}

function bedmon_init() {
  libraries_load('highcharts');
  // TODO: drupal_add_library does not work.
  //drupal_add_library('bedmon', 'highcharts');
  //drupal_add_js(drupal_get_path('module', 'bedmon') . '/highcharts.js');

  if (($library = libraries_detect('highcharts')) && !empty($library['installed'])) {
    // The library is installed. Awesome!
    //print_r("Highcharts loaded");
  }
  else {
    // Something went wrong. :(
    // This contains a short status code of what went wrong, such as 'not found'.
    $error = $library['error'];
    // This contains a detailed (localized) error message.
    $error_message = $library['error message'];
    print_r("Highcharts not loaded");
  }
}

/**
 * Implements hook_libraries_info().
 */
function bedmon_libraries_info() {
  $libraries = array();
  $libraries['highcharts'] = array(
    //'title' => 'Vertical Tabs',
    //'website' => 'http://drupal.org/node/323112',
    'name' => 'Highcharts',
    'vendor url' => 'http://www.highcharts.com/',
    'download url' => 'http://www.highcharts.com/download',
/*
    'version arguments' => array(
      'file' => 'highcharts.js',
      // jQuery FlexSlider v2.1
      'pattern' => '/Highcharts v(\d+\.+\d+)/',
      'lines' => 2,
    ),
*/
    'version callback' => 'short_circuit_version',
    'files' => array(
      'js' => array(
        /*'highcharts.js',*/
        'highstock.js',
      ),
    ),
  );

  return $libraries;
}

/**
* Short-circuit the version argument.
*/
function short_circuit_version() {
  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function bedmon_block_info() {
  $blocks = array();
  $blocks['bedmon'] = array(
    // The name that will appear in the block list.
    'info' => t('Real Time charts'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['bedmon3'] = array(
    'info' => t('Real Time pressure'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['reports'] = array(
    'info' => t('Reports'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function bedmon_block_view($delta = '') {
  $node = menu_get_object();
  if(isset($node->field_station_id)) {
    $station_id=$node->field_station_id['und'][0]['value'];
  }
  else {
    // Invalid sensor_id.
    $station_id = -1;
  }
  //print_r($node->field_station_id);

  //drupal_add_js(drupal_get_path('module', 'bedmon') . '/bedmon_chart.js');

  $path = drupal_get_path('module', 'bedmon');
  switch ($delta) {
    case 'aob':
      if (user_access('access content')) {
      } // if user_access
      break;
    case 'bedmon':
      //drupal_add_js(array('bedmon' => array('uid' => $station_id)), 'setting');
      //drupal_add_js($path . '/bedmon_chart.js');
      $block['subject'] = t('Pulse, Respiration Charts');
      $block['content']['#attached']['js'][] = array(
        'type' => 'file',
        'data' => $path . '/bedmon_chart.js',
      );
      $block['content']['#attached']['js'][] = array(
        'type' => 'setting',
        'data' => array('bedmon' => array('uid' => $station_id)),
      );
/*
      $block = array (
        'subject' => t('Pulse, Respiration Charts'),
        'content' => array(
          '#markup' => t('These are the block contents'),
          '#attached' => array(
            'js' => array(
              array(
                'type' => 'file',
                'data' => $path . '/bedmon_chart.js',
              ),
            ),
          ),
        ),
      );
*/
/*
      if (user_access('access content')) {
        $block['content']['#markup'] = "";
      }
*/
      //$block['content']['#attached']['libraries_load'][] = array('highcharts', 'highcharts');
      //$block['content']['#attached']['libraries_load'][] = array('highcharts');
      //$block['content']['#attached']['js'] = drupal_get_path('module', 'bedmon') . '/bedmon.js';
      break;
    case 'bedmon3':
      //drupal_add_js(array('bedmon3' => array('uid' => $station_id)), 'setting');
      $block = array (
        'subject' => t('Pressure Profile'),
        'content' => array(
          '#markup' => custom_contents(),
          '#attached' => array(
            'js' => array(
              array(
                'type' => 'file',
                'data' => $path . '/bedmon_pressure.js',
              ),
              array(
                'type' => 'setting',
                'data' => array('bedmon3' => array('uid' => $station_id)),
              ),
            ),
          ),
        ),
      );
/*
      $block = array();
      drupal_add_js(drupal_get_path('module', 'bedmon') . '/bedmon_pressure.js');
      $block['subject'] = t('Pressure Profile');
      if (user_access('access content')) {
        //$block['content']['#markup'] = "";
        $block['content'] = custom_contents();
      }
*/
      break;
      case 'reports':
      $block['content']['#attached']['js'] = array(
        array(
          'type' => 'file',
          'data' => $mpath . '/jav_reports.js',),
        );
        if (user_access('access content')) {
          $block = array
          (
            'subject' => t(''),
            'content' => array
            (
              'eventlist_block' => array
              (
                '#prefix' => "<div id='reports'>",
                '#suffux' => "</div>",
                '#markup' => t("Reports....."),
              ),
            ),
          );

          $reqtype = 'rpt';
          $filter = new stdClass(); // (object) [];
          $filter->start = -1;
          $filter->end = time() * 1000;
          // Get all nids of type lifts.
          $node_type = "patients";
          $nids = array();
          $wardlist = array();

          $nids = db_query("SELECT nid FROM {node} WHERE type = :type", array(':type' => $node_type))->fetchCol();

          foreach($nids as $nid) {
            $node = node_load($nid);
            //dpm($node);
            $field_dev = field_get_items('node', $node, 'field_station_id', 'en');
            $sid = $field_dev[0]['safe_value'];
            $sid_list[] = $sid;

            $node_wrapper = entity_metadata_wrapper('node', $node);
            $ward = $node_wrapper->field_ward_number->value()->name;
            $wardlist[$sid] = $zone;
          }

          $filter->sidList = $sid_list;
          //
          $result = bedmon_get_reports($sid_list);
          //dpm($result);
          date_default_timezone_set('Asia/Singapore');
          //

          $header = array(
            array('data' => t('Ward')),
            array('data' => t('Station ID')),
            array('data' => t('Reported Date')),
            array('data' => t('Time')),
            array('data' => t('Type')),
            array('data' => t('Value')),
          );

          $items = array();
          foreach ($result as $row) {
            $date = new DateTime();
            $date->setTimestamp(intval($row->ts)/1000);
            $dt = $date->format('d-m-Y');
            $tt = $date->format('g:i a');
            //print_r($dtime, $row->snum);
            $ward = $wardlist[$row->uid];
            $items[] = array($ward, $row->uid, $dt, $tt, $row->type, $row->value);
          }

          $block['content'] = theme('table', array('header' => $header, 'rows' => $items, 'attributes' => array('id' => 'reports-table')));
        } // if user_access
        break;
  } // switch
  return $block;
}

function custom_contents() {
  $pressure_grid =
           "<div>
              <div class='location-box' id='ppl1'>  </div>
              <div class='location-box' id='ppl2'>  </div>
              <div class='location-box' id='ppl3'>  </div>
              <div class='location-box' id='ppl4'>  </div>
              <div class='location-box' id='ppl5'>  </div>
              <div class='location-box' id='ppl6'>  </div>
              <div class='col-xs-1 location-box' id='ppl7'>  </div>
            </div>";
  return $pressure_grid;
}

/**
* Implements hook_views_api().
*/
/*
function bedmon_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bedmon') . '/views',
  );
}
*/


/*
* https://www.drupal.org/node/1993228
*/
function bedmon_preprocess_views_view(&$vars)
{
  //dpm($vars['view']->result);
  if($vars['view']->name == 'dashboard' && $vars['view']->current_display == 'page') {
    $active_sids = array();
    foreach($vars['view']->result as $cnum => $cell) {
      //print_r($cell->node_title);
      $sid_content = $cell->field_field_station_id[0];
      //$active_nids[] = $sid_content->raw;
      $active_sids[] = $sid_content['raw']['value'];
    }
    //print_r($active_nids);
    //if(!empty(array_filter($active_sids))) {
    if(count($active_sids) > 0) {
      drupal_add_js(array('bedmon2' => array('nid_list' => $active_sids)), 'setting');
    } else {
      // Indiate the case of empty array to JavaScript.
      drupal_add_js(array('bedmon2' => array('nid_list' => -1)), 'setting');
    }
    drupal_add_js(drupal_get_path('module', 'bedmon') . '/bedmon_vitals.js');
    // drupal_add_js(drupal_get_path('theme', 'your-theme') . '/your-js.js');
    // drupal_add_css(drupal_get_path('theme', 'your-theme') .'/your-css.css');
/*
    $vars['view']['#attached']['js'][] = array
    (
      'type' => 'file',
      'data' => drupal_get_path('theme', 'my_theme') . '/my_script.js',
    );
*/
  }
}

/*
function bedmon_views_post_execute (&$sourceview) {
  $nids = '';
  foreach($sourceview->result as $node) {
    $nids += $node->nid . ',';
  }

  $nids = rtrim($nids, ',');
  //dpm($nids);
}
*/

/**
 * Implements hook_menu().
 */
function bedmon_menu() {
  $items = array();

  $items['admin/config/content/bedmon'] = array(
    'title' => 'Real time vitals',
    'description' => 'Configuration for Real time charts module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bedmon_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['bedmon'] = array(
    'title' => 'Real time charts',
    'page callback' => '_bedmon_page',
    'access arguments' => array('access bedmon content'),
    'type' => MENU_NORMAL_ITEM, //Will appear in Navigation menu.
  );
  $items['bedmon/get'] = array(
    'title' => 'Real time charts',
    'page callback' => 'bedmon_get_json',
    //'page arguments' => array(1), //get param from URL.
    //'page arguments' => array(1,'week'), // second arg for range.
    'access arguments' => array('access bedmon content'),
    'type' => MENU_CALLBACK,
  );
  $items['bedmon/vitals'] = array(
    'title' => t('Real time vitals'),
    'page callback' => 'bedmon_vitals_json',
    //'page arguments' => array(1), //get param from URL.
    'access arguments' => array('access bedmon content'),
    'type' => MENU_CALLBACK,
  );
  $items['bedmon/getpp'] = array(
    'title' => 'Real time pressure',
    'page callback' => 'bedmon_getpp_json',
    'access arguments' => array('access bedmon content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function _bedmon_page() {
  $items = array();
  return $items;
}

/*
* $range=0, for current value.
* $range=1 for 1 week range.
*/
function bedmon_get_json($uid=-1, $range=0) {
        //echo "Inside bedmon callback";
        $result_p = get_results_db('block', $uid, $range, 'pulserate');
        //dpm($result_p);
        //print_r($result_p);
        $result_r = get_results_db('block', $uid, $range, 'resprate');
        $items_p = array();
        $items_r = array();
        // Iterate over the resultset and format as links.
        date_default_timezone_set('Asia/Singapore');
        foreach ($result_p as $row) {
          //$date = new DateTime();
          //$timeHr = date('g:i a',($row->timestamp)/1000);
          //$date->setTimestamp(($row->currentdatetime)/1000);
          $time = intval($row->timestamp);
          $value = round($row->value2use, 2);
          $items_p[] = array('x' => $time, 'y' => $value);
          //print_r($items_p);
        } // foreach
        foreach ($result_r as $row) {
          $time = intval($row->timestamp);
          $value = round($row->value2use, 2);
          $items_r[] = array('x' => $time, 'y' => $value);
        } // foreach
        $items_all = array();
        //$items_all[] = array('p' => $items_p, 'r' => $items_r);
        $items_all = array('p' => $items_p, 'r' => $items_r);
        return drupal_json_output($items_all);
}

/**
 * Custom content function.
 *
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 *
 * @return
 *   A result set of the targeted posts.
 */
function get_results_db($display, $uid, $range, $vtype){
  //Calculate the date a week ago.
  $today = getdate();
  //$start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
  //Get today's date.
  $end_time = time();
  $end_time = $end_time * 1000;
  //$end_time = microtime(true) * 1000;
  // By default, pick up to 10 weeks data.
  // TODO: Use range parameter.
  $start_time = $end_time - 3600*1000*24*7*10;

  //NEW LINE
  $max_num = variable_get('bedmon_max', 3);

  $bg_db = array(
      'database' => 'comfort_data',
      'username' => 'user', // assuming this is necessary
      'password' => 'pass', // assuming this is necessary
      'host' => 'localhost', // assumes localhost
      'driver' => 'mysql', // replace with your database driver
  );
  // replace 'YourDatabaseKey' with something that's unique to your module
  Database::addConnectionInfo('COMFORT', 'default', $bg_db);
  db_set_active('COMFORT');

  // SELECT * FROM (SELECT * FROM [table] WHERE userid='$userid' ORDER BY timestamp DESC LIMIT $q_length) sub ORDER BY timestamp ASC
  // execute queries here
  //print_r($start_time, $end_time );
  //dpm($start_time. ":".$end_time);
  $query = array();
  if ($display == 'block'){
    //$query = db_select('pulserate', 'hr')
    // inner_query first.
    $query_inner = db_select($vtype, 'tbl')
      ->fields('tbl', array('timestamp', 'value2use'))
      //->condition('sender_id', 1) //Published.
      ->condition('userid', $uid) //Published.
      ->condition('timestamp', array($start_time, $end_time), 'BETWEEN')
      ->orderBy('timestamp', 'DESC'); //Most recent first.
    // TODO: Can be conditional, different for block and page.
    //$query->range(0, 12);
    //$query->range(0, $max_num);
    // subquery or outer_query. Reverse the order for timestamps, otherwise highchart will not work.
    $query = db_select($query_inner, 'sub')
       ->fields('sub', array('timestamp', 'value2use'))
       ->orderBy('timestamp', 'ASC');
  }
  //drupal_set_message((string) $query);
  $result = $query->execute();
  //print_r($result);
  db_set_active(); // without the paramater means set back to the default for the site
  //drupal_set_message(t('The queries have been made.'));

/*
   while($record = $result->fetchAssoc()) {
        print_r($record);
   }
*/

  return $result;
}

function bedmon_vitals_json() {
  //retrieve our post value
  //$nid_list = $_REQUEST['nidList'];
  $uid_list = $_POST['nidList'];
  //dpm($nid_list); // This works, but not print_r.
  //print_r($nid_list); This print will cause ajax reply error.
  // do our custom database query
  $result = bedmon_get_vitals($uid_list);
  if($result){
  // Return json
    return drupal_json_output($result);
  }else{
    // Return json
    return drupal_json_output("fail");
  }
}

/**
 * Retrieve vital data from external db.
 *
 * @return
 *   A result set of vitals and bed status.
 */
function bedmon_get_vitals($uid_list){
  //Get today's date.
  $today = getdate();
  //Calculate the date a week ago.
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
  //Get all posts from one week ago to the present.
  $end_time = time();

  //NEW LINE
  $max_num = variable_get('bedmon_max', 3);

  $bg_db = array(
      'database' => 'comfort_data',
      'username' => 'user',
      'password' => 'pass',
      'host' => 'localhost',
      'driver' => 'mysql',
  );
  // replace 'YourDatabaseKey' with something that's unique to your module
  Database::addConnectionInfo('COMFORT', 'default', $bg_db);
  db_set_active('COMFORT');

  $query = array();

  $params = array();
  $params['pulserate'] = -1;
  $params['resprate'] = -1;
  $params['bedmovement'] = 0;
  $params['bedstatus'] = 0;

  $result_all = array();
  $time_hr = -1;
  $db_tables = array('pulserate', 'resprate', 'bedmovement', 'bedstatus');
  foreach($uid_list as $snum => $uid) {
    //for($i = 0; $i < 4; $i++) {
    foreach($db_tables as $tblname) {
      //$query = db_select('pulserate', 'hr')
      //dpm($uid);
      $query = db_select($tblname, 'tbl')
        ->fields('tbl', array('timestamp', 'value2use,'))
        ->condition('userid', $uid)
        // ->condition('timestamp', array($start_time, $end_time), 'BETWEEN')
        ->orderBy('timestamp', 'DESC')
        ->range(0, 1);
      $result = $query->execute();
      //dpm($result);
      // If there is no next record, FALSE will be returned.
      if($result->rowCount() > 0) {
        $row = $result->fetchAssoc();
        $time = $row['timestamp'];
        $params[$tblname] = round($row['value2use'], 2);
        //dpm($row);
        //dpm($params);
      } else {
        // No values in the db for this parameter and userid.
        // TODO: Fix this.
        $time = -1;
        $value = -1;
      }
      // TODO: Fix this.
      if($tblname == 'pulserate') {
        $time_hr = $time;
      }
    }
    $result_all[] = array('UserID' => $uid,
                          'TimeP' => $time_hr,
                          'Pulse' => $params['pulserate'],
                          'Resp' => $params['resprate'],
                          'Mov' => $params['bedmovement'],
                          'Occ' => $params['bedstatus'],
                          );
    // Set default values for next userid.
    $params['pulserate'] = -1;
    $params['resprate'] = -1;
    $params['bedmovement'] = 0;
    $params['bedstatus'] = 0;
  }
  //
  // without the paramater means set back to the default for the site
  db_set_active();
  //drupal_set_message(t('The queries have been made.'));
/*
   while($record = $result->fetchAssoc()) {
        print_r($record);
   }
*/
  return $result_all;
}

function bedmon_getpp_json($uid=-1, $range=0) {
  $result = get_results_db2('block', $uid);
  if($result){
  // Return json
    return drupal_json_output($result);
  }else{
    // Return json
    return drupal_json_output("fail");
  }
}

function get_results_db2($display, $uid){
  $bg_db = array(
      'database' => 'comfort_data',
      'username' => 'user',
      'password' => 'pass',
      'host' => 'localhost',
      'driver' => 'mysql',
  );
  // replace 'YourDatabaseKey' with something that's unique to your module
  Database::addConnectionInfo('COMFORT', 'default', $bg_db);
  db_set_active('COMFORT');
  $tblname = 'posture';
  $query = array();

  $query = db_select($tblname, 'tbl')
        ->fields('tbl', array('timestamp', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7'))
        ->condition('userid', $uid)
        // ->condition('timestamp', array($start_time, $end_time), 'BETWEEN')
        ->orderBy('timestamp', 'DESC')
        ->range(0, 1);
  $result = $query->execute();
  //
  $grid1 = 1;
  $grid2 = 200;
  $grid3 = 110;
  $grid4 = 350;
  $grid5 = 260;
  $grid6 = 100;
  $grid7 = 10;
  //
  if($result->rowCount() > 0) {
    $row = $result->fetchAssoc();
    $time = $row['timestamp'];
    $grid1 = intval($row['p1']);
    $grid2 = intval($row['p2']);
    $grid3 = intval($row['p3']);
    $grid4 = intval($row['p4']);
    $grid5 = intval($row['p5']);
    $grid6 = intval($row['p6']);
    $grid7 = intval($row['p7']);
  }

  $data = array($grid1, $grid2, $grid3, $grid4, $grid5, $grid6, $grid7);
  //
  db_set_active();
  //
  return $data;
}


function bedmon_get_reports($uid_list){
  //Get today's date.
  $today = getdate();
  //Calculate the date a week ago.
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 30), $today['year']);
  //Get all posts from one week ago to the present.
  $end_time = time();

  //NEW LINE
  $max_num = variable_get('bedmon_max', 3);

  $bg_db = array(
    'database' => 'comfort',
    'username' => 'user', // assuming this is necessary
    'password' => 'pass', // assuming this is necessary
    'host' => 'localhost', // assumes localhost
    'driver' => 'mysql', // replace with your database driver
  );
  // replace 'YourDatabaseKey' with something that's unique to your module
  Database::addConnectionInfo('COMFORT', 'default', $bg_db);
  db_set_active('COMFORT');

  $query = array();
  $params = array();
  $result_all = array();
  $time_hr = -1;
  $db_tables = array('pulserate', 'resprate', 'bedmovement', 'bedstatus');
  foreach($uid_list as $snum => $uid) {
    //for($i = 0; $i < 4; $i++) {
    foreach($db_tables as $tblname) {
      //$query = db_select('pulserate', 'hr')
      //dpm($uid);
      $query = db_select($tblname, 'hr')
      ->fields('hr', array('timestamp', 'value2use,'))
      ->condition('userid', $uid)
      ->condition('timestamp', array($start_time, $end_time), 'BETWEEN')
      ->orderBy('timestamp', 'DESC');
      //->range(0, 1);
      $result = $query->execute();
      //dpm($result);
      foreach ($result as $row) {
        date_default_timezone_set('Asia/Singapore');
        //$date = new DateTime();
        //$timeHr = date('g:i a',($row->timestamp)/1000);
        //$date->setTimestamp(($row->currentdatetime)/1000);
        $uid = ($row->userid);
        $time = ($row->timestamp);
        $value = round($row->value2use, 2);
        $result_all[] = array('uid' => $uid,
        'ts' => $time,
        'type' => $tblname,
        'val' => $value
      );
    } // foreach row
  } // foreach table
} // foreach uid
//
db_set_active();

return $result_all;
}



/**
 * Page callback: Current posts settings
 *
 * @see current_posts_menu()
 */
function bedmon_form($form, &$form_state) {
  $form['bedmon_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of entries in the chart'),
    '#default_value' => variable_get('bedmon_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of entries to display in the chart.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
